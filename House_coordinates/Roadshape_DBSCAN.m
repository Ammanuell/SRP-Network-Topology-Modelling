clc; clear;
houses = [
   -1.3266   -0.4475;
    1.3652   -0.3104;
   -1.2759   -2.6532;
    1.3619   -2.9049;
   -0.9716   -4.8786;
    1.6681   -4.7861;
    2.1681   -6.5458;
    0.3975   -8.6985;
    1.0125   -9.8985;
    3.4710   -8.7414;
    2.9674  -12.4787;
    4.8949  -10.4483;
    7.2021  -12.3794;
    5.8661  -14.7655;
    7.2534  -15.8331;
    9.1290  -14.0699;
   11.1134  -15.8503;
   10.4065  -18.5592;
   11.7572  -19.6238;
   13.7694  -17.9162;
   14.9315  -22.5099;
   16.9024  -22.5495;
   16.9302  -18.2361;
   18.4517  -20.5811;
   20.0280  -15.6568;
   21.3674  -18.1135;
   23.1670  -17.0590;
   22.0161  -14.5107;
   26.2388  -14.7767;
   24.2834  -19.4148;
   26.8088  -18.2111;
   25.8315  -23.1168;
   28.0115  -21.5111;
   27.6196  -26.2767;
   29.4478  -24.1581;
   31.6847  -27.0076;
   29.8585  -28.8935;
   35.2071  -30.9552;
   33.9688  -33.1876;
   31.7421  -31.5499;
   30.3531  -35.2599;
   32.7837  -36.0033;
   32.1315  -39.4908;
   30.9102  -40.1444;
   29.7013  -39.3843;
   33.5464  -28.3901;
   36.1820  -29.3293;
   37.9388  -27.3439;
   36.0322  -25.3113;
   37.7666  -23.9421;
   40.3448  -24.8251;
   39.0029  -23.2886;
   22.8943  -11.9254;
   25.4886  -10.9874;
   25.6725   -7.9186;
   22.9293   -7.4916;
   23.7656   -3.2438;
   26.3608   -3.8822;
   27.3677   -1.4168;
   25.1215    0.2095;
   27.6442    2.8520;
   29.5536   -2.1067;
   30.8235    0.3886;
   33.1000   -1.5038;
   30.6993   -2.8749;
   33.8258   -5.1263;
   34.2327   -2.4773;
   35.0284   -3.7617;
   26.4756    4.0893;
   25.2491    1.6609;
   21.9694    4.2306;
   23.9912    6.1668;
   19.2226    6.5223;
   18.9467    8.4715;
   20.2425    9.0258;
    1.3380    3.5358;
   -1.3351    3.5451;
   -0.3787    7.3130;
    1.9181    5.9516;
    2.7103    8.1643;
    0.4312    9.4740;
    4.6079   11.4625;
    2.0750   12.4811;
    4.1355   14.8065;
    5.8680   12.6554;
    8.9963   15.4300;
    6.6019   16.8556;
    8.6368   18.6021;
   12.7342   18.4357;
   11.1722   20.6244;
   15.6997   20.8961;
   14.3790   23.2329;
   17.4226   22.3494;
   15.4014   24.1063;
   18.4897   26.7805;
   19.3186   24.1116;
   21.7504   26.1938;
   21.0460   28.8978;
   24.4413   28.4379;
   22.8222   30.3212;
   27.4419   31.6337;
   26.9316   28.2440;
   29.0395   29.9695;
   29.7581   25.8986;
   31.2869   28.2389;
   32.6569   27.4098;
   32.3826   24.6681;
   36.3982   24.1172;
   33.5880   22.3505;
   33.4184   20.8247;
   33.3190   18.4517;
   36.0573   18.2365;
   34.5146   14.0761;
   36.4858   14.8976;
   33.7538   15.3946;
   36.9099   27.2261;
   34.5550   28.6802;
   35.4960   31.0714;
   37.6570   29.2925;
   39.4201   32.3068;
   38.6582   34.1982;
   36.8076   33.2939;
   22.8105   33.1057;
   24.6067   35.2297;
   21.4629   35.3906;
   23.8403   36.8106;
   20.3499   38.5456;
   22.8582   39.7380;
   22.3362   42.7562;
   19.5429   42.6169;
   19.6823   44.2448;
   22.2572   45.3361;
   22.2561   47.9967;
   19.6575   48.0660;
   19.5541   50.8331;
   22.3423   51.0499;
   22.1560   53.7909;
   19.5437   54.4446;
   19.5446   57.8906;
   22.1570   58.6568;
   19.5509   61.5444;
   22.2399   61.1663;
   19.6392   65.5737;
   22.2507   64.5639;
   19.6063   69.0586;
   21.0371   70.0391;
   22.1940   69.2707;
];


% Step 1: Cluster Points using DBSCAN
epsilon = 5; % Maximum distance for a point to be considered a neighbor
minPts = 5;  % Minimum number of points required to form a cluster
labels = dbscan(houses, epsilon, minPts);

% Step 2: Fit Curves to Each Cluster
unique_labels = unique(labels);
colors = lines(length(unique_labels)); % Colors for visualization

figure;
hold on;

for i = 1:length(unique_labels)
    cluster_label = unique_labels(i);
    if cluster_label == -1
        % Skip noise points
        continue;
    end
    
    % Get points in this cluster
    cluster_points = houses(labels == cluster_label, :);
    
    % Extract X and Y coordinates
    x = cluster_points(:, 1);
    y = cluster_points(:, 2);
    
    % Fit a curve (Polynomial or Spline)
    % Option 1: Polynomial Fitting
    degree = 2; % Adjust this for more complex curves
    coeffs = polyfit(x, y, degree);
    x_curve = linspace(min(x), max(x), 100);
    y_curve = polyval(coeffs, x_curve);
    
    % Option 2: Spline Fitting
    % Uncomment below to use splines instead of polynomials
    % spline_fit = spline(x, y);
    % x_curve = linspace(min(x), max(x), 100);
    % y_curve = ppval(spline_fit, x_curve);
    
    % Plot original points
    scatter(x, y, 25, colors(i, :), 'filled');
    
    % Plot fitted curve
    plot(x_curve, y_curve, 'Color', colors(i, :), 'LineWidth', 1.5);
end

hold off;
xlabel('X');
ylabel('Y');
title('Curved Line Fitting with DBSCAN');
legend('Clusters and Fitted Curves');
grid on;
